问答

Q1:"抽象类"与"一般类"有何差异？
A1:抽象类是用来被其他类所继承的，而不会用来产生该类的对象，一般类则反之。

Q2:"构造"和"析构"的顺序？
A2:构造时的顺序为父类构造函数->子类继承成员的构造函数->子类的构造函数；
析构则为构造的反序流程。

Q3:声明为"虚拟析构函数"的作用是什么？
A3:虚拟析构函数是用来析构动态分配的内存空间。由于继承的关系，可以将类定义成继承其他父类
的类型，然而在动态分配的同时会有冲突的关系存在，在析构的时候难免会有没有析构成功的类，
可以使用虚拟析构函数的概念来解决这一类问题。

Q4:多态(同名异式)的意义？
A4:多态是面向对象的重要功能之一，在继承类时，对于同样的行为可以赋予不同的实际操作，
所以又称"同名异式"。广义来说，类的继承就是一种多态，只要在继承后新增或改变基类的状态及
行为就能达到类多态的效果。

Q5:继承的意义和优点？
A5:继承除了可重复使用之前所开发过的类之外，最大的好处在于维持对象封装的特性，
因为继承时不容易改变已经设计完整的类，可以减少继承时发生类设计的错误。

Q6:继承的基本关系？
A6:继承关系中，基类中的"数据成员"与"成员函数"均可被派生类所继承。
派生类具有新的特性，必须有自己的构造函数、析构函数与重载赋值运算(=)。
友元类的关系也仅止于基类，在派生类中必须重新定义。继承关系可以使用
public、protected、private三个关键字来声明。

Q7:单一继承与多重继承的定义？
A7:单一继承指派生类只继承单独一个基类。多重继承是指派生类继承自多个基类，
而这些被继承的基类相互之间可能都没有关系。

Q8:protected关键字的作用？
A8:当派生类以protected声明继承基类时，继承而来的基类所有成员除了private类型继承之后仍是
private类型之外，protected和public类型都会变成protected类型的成员。
派生类内的其他成员函数可以直接存取基类中位于protected与public存取区块内的成员，但是不可以
存取基类内位于private存取区块内的成员。

Q9:创建派生类时如何创建构造函数和析构函数？
A9:创建派生类时会创建基类的构造函数再调用派生类的构造函数，当程序结束时会先调用派生类
的析构函数再调用基类的析构函数。

Q10:C++中提供了哪几种继承方式？
A10:public/protected/private

Q11:类可以通过哪些方式到达多态的目的？
A11:
1、继承类新增成员函数
2、继承时重新定义成员函数
3、基类定义为虚拟函数，在类被继承时重新实现该函数